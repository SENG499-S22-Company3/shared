"""
ECMAScript Date object.
https://tc39.es/ecma262/multipage/numbers-and-dates.html
"""
scalar Date

"""
Root type query.
"""
type Query {
  """
  Get the current user
  """
  me: User
  """
  Find a user by their id
  """
  findUserById(id: ID!): User
  """
  Get Teaching Preference Survey
  """
  survey: TeachingPreferenceSurvey!
  """
  Get a list of courses for a given term
  """
  courses(term: Term): [CourseSection!]
  """
  Schedule for a given term. If year is given, returns the most recent schedule generated for that year.
  """
  schedule(year: Int): Schedule
  """
  Get all courses preferences
  """
  coursePreferences: [CoursePreference!]
  """
  Get the all users
  """
  allUsers: [User!]
}

"""
Generated schedule for a year
"""
type Schedule {
  """
  ID of the schedule
  """
  id: ID!
  """
  Year for the schedule
  """
  year: Int!
  """
  When the schedule was generated
  """
  createdAt: Date!
  """
  Scheduled courses
  """
  courses(term: Term!): [CourseSection!]
}

"""
Root type mutation.
"""
type Mutation {
  """
  Login into a user account using email and password
  """
  login(username: String!, password: String!): AuthPayload!
  """
  Logout the currently logged in user
  """
  logout: AuthPayload!
  """
  Register a new user account
  """
  createUser(username: String!): CreateUserMutationResult!
  """
  Updates a user given the user id.
  """
  updateUser(input: UpdateUserInput!): UpdateUserMutationResult
  """
  Change the password of the currently logged in user
  """
  changeUserPassword(input: ChangeUserPasswordInput!): Response!
  """
  Reset a users password.
  """
  resetPassword(id: ID!): ResetPasswordMutationResult!
  """
  Teaching preferences
  """
  createTeachingPreference(input: CreateTeachingPreferenceInput!): Response!
  """
  Generate schedule
  """
  generateSchedule(input: GenerateScheduleInput!): Response!
  """
  Update an entire schdule.
  """
  updateSchedule(input: UpdateScheduleInput!): UpdateScheduleResponse!
}

"""
Input when updating a schedule. The input is used to replace the entire contents of a schedule.
"""
input UpdateScheduleInput {
  """
  ID of the schedule to update. If not given, the current schedule will be updated.
  """
  id: ID
  """
  The updated courses
  """
  courses: [CourseSectionInput!]!
  """
  Whether to perform validation on the backend through algorithm 1.
  """
  skipValidation: Boolean!
  """
  Which algorithm to use. If COMPANY4 is selected then validation will not be performed regardless of skipValidation.
  """
  validation: Company!
}

"""
Input for specifying a course to update while updating a schedule.
"""
input CourseSectionInput {
  """
  The course identifier
  """
  id: CourseUpdateInput!
  """
  Hours per week a course takes
  """
  hoursPerWeek: Float!
  """
  Maximum capacity of the section
  """
  capacity: Int!
  """
  Section number for courses, eg: A01, A02
  """
  sectionNumber: String
  """
  Professor's info, if any professors are assigned. Usernames
  """
  professors: [String!]!
  """
  The start date of the course
  """
  startDate: Date!
  """
  The end date of the course
  """
  endDate: Date!
  """
  Days of the week the class is offered in - see Day
  """
  meetingTimes: [MeetingTimeInput!]!
}

"""
Response from updating a schedule.
"""
type UpdateScheduleResponse {
  """
  Whether the update was successful
  """
  success: Boolean!
  """
  General messaging for the client to consume.
  """
  message: String
  """
  Errors associated to updating the schedule. Only populated if success is false. This could include validation issues if validation is on.
  """
  errors: [String!]
}

"""
Generic response type for queries and mutations.
"""
type Response {
  """
  Whether the request was successful
  """
  success: Boolean!
  """
  General messaging for the client to consume. May contain error message or success message.
  """
  message: String
}

"""
Generic error response type for queries and mutations.
"""
type Error {
  """
  Error message
  """
  message: String!
  """
  Multiple errors in the case
  """
  errors: [Error!]
}

"""
Input for changing the password of a user
"""
input ChangeUserPasswordInput {
  """
  The current password
  """
  currentPassword: String!
  """
  The new password
  """
  newPassword: String!
}

"""
Input for submitting teaching preferences for a professor
"""
input CreateTeachingPreferenceInput {
  """
  Whether the user has a PEng or not. Determines whether they are qualified to teach certain courses.
  """
  peng: Boolean!
  """
  User's ID
  """
  userId: ID!
  """
  User's preferred courses
  """
  courses: [CoursePreferenceInput!]!
  """
  If a user has a non-teaching term, they can specify it here. If this is specified then the user will not be scheduled to teach in that term.
  """
  nonTeachingTerm: Term
  """
  Whether the user has relief from teaching. If true, the user will not be scheduled to teach in any term.
  """
  hasRelief: Boolean!
  """
  If the user has relief and wishes to specify the reason.
  """
  reliefReason: String
  """
  Whether the user has a topic course to teach.
  """
  hasTopic: Boolean!
  """
  If the user has a topic course, they can specify the details of the course.
  """
  topicDescription: String
  """
  Number of courses a professor prefers to teach in the FALL semester. Defaults to 1.
  """
  fallTermCourses: Int
  """
  Number of courses a professor prefers to teach in the SPRING semester. Defaults to 1.
  """
  springTermCourses: Int
  """
  Number of courses a professor prefers to teach in the SUMMER semester. Defaults to 1.
  """
  summerTermCourses: Int
}

"""
The type used to determine what courses a professor can fill out course preferences for.
"""
type TeachingPreferenceSurvey {
  """
  The list of courses a professor can fill out course preferences for.
  """
  courses: [CourseID!]!
}

"""
Used to attach a preference value for a given course.
"""
type CoursePreference {
  """
  The course ID
  """
  id: CourseID!
  """
  The preference value. The value definitions are the following:
  "Unable to teach" = 0
  "With Effort" and "Unwilling" = 1
  "Able" and "Unwilling" = 2
  "With Effort" and "Willing" = 3
  "Able" and "Willing" = 4
  "With Effort" and "Very Willing" = 5
  "Able" and "Very Willing" = 6
  """
  preference: Int!
}

"""
Input used for submitting a course preference value for a given course.
"""
input CoursePreferenceInput {
  """
  Course subject, e.g. SENG, CSC
  """
  subject: String!
  """
  Course code, e.g. 499, 310
  """
  code: String!
  """
  Term course is offered in
  """
  term: Term!
  """
  The preference value. The value definitions are the following:
  "Unable to teach" = 0
  "With Effort" and "Unwilling" = 1
  "Able" and "Unwilling" = 2
  "With Effort" and "Willing" = 3
  "Able" and "Willing" = 4
  "With Effort" and "Very Willing" = 5
  "Able" and "Very Willing" = 6
  """
  preference: Int!
}

"""
Input used to generate a schedule.
"""
input GenerateScheduleInput {
  """
  Base year for the schedule to be generated.
  """
  year: Int!
  """
  Fall term courses to be scheduled. For fall, this would be same year as the base year.
  """
  fallCourses: [CourseInput!]
  """
  Spring term courses to be scheduled. For spring, this would be base year + 1 (e.g. if base year is 2019, spring courses would be 2020).
  """
  springCourses: [CourseInput!]
  """
  Summer term courses to be scheduled. For summer, this would be base year + 1 (e.g. if base year is 2019, summer courses would be 2020).
  """
  summerCourses: [CourseInput!]
  """
  Algorithm to use for algorithm 1 (schedule generation).
  """
  algorithm1: Company!

  """
  Algorithm to use for algorithm 2 (capacity forecasting).
  """
  algorithm2: Company!
}

"""
Meeting time for a course on a given day.
"""
input MeetingTimeInput {
  """
  Weekday - see DayEnum
  """
  day: Day!
  """
  Start time
  """
  startTime: Date!
  """
  End time
  """
  endTime: Date!
}

"""
Input to specify a course to be scheduled.
"""
input CourseInput {
  """
  Course subject, e.g. SENG, CSC
  """
  subject: String!
  """
  Course code, e.g. 499, 310
  """
  code: String!
  """
  Number of Sections for a course
  """
  section: Int!
}

"""
Input to specify a course when updating a schedule.
"""
input CourseUpdateInput {
  """
  Course subject, e.g. SENG, CSC
  """
  subject: String!
  """
  Course title. e.g. Introduction to Artificial Intelligence
  """
  title: String!
  """
  Course code, e.g. 499, 310
  """
  code: String!
  """
  Term course is offered in
  """
  term: Term!
}

"""
Unique identifier for a course.
"""
type CourseID {
  """
  Course subject, e.g. SENG, CSC
  """
  subject: String!
  """
  Course title. e.g. Introduction to Artificial Intelligence
  """
  title: String!
  """
  Course code, e.g. 499, 310
  """
  code: String!
  """
  Term course is offered in
  """
  term: Term!
}

"""
Response after resetting the password for a user.
"""
type ResetPasswordMutationResult {
  """
  Whether the password was successfully reset
  """
  success: Boolean!
  """
  Optional error message
  """
  message: String
  """
  New user password. Only returned if password change is successful.
  """
  password: String
}

"""
A set of CourseSections with matching CourseID represent a course offering
"""
type CourseSection {
  """
  The course identifier
  """
  CourseID: CourseID!
  """
  Hours per week a course takes
  """
  hoursPerWeek: Float!
  """
  Maximum capacity of the section
  """
  capacity: Int!
  """
  Section number for courses, eg: A01, A02
  """
  sectionNumber: String
  """
  Professor's info, if any professors are assigned
  """
  professors: [User!]
  """
  The start date of the course
  """
  startDate: Date!
  """
  The end date of the course
  """
  endDate: Date!
  """
  Days of the week the class is offered in - see Day
  """
  meetingTimes: [MeetingTime!]!
}

"""
Weekday and time of a course section offering
"""
type MeetingTime {
  """
  Weekday - see DayEnum
  """
  day: Day!
  """
  Start time
  """
  startTime: Date!
  """
  End time
  """
  endTime: Date!
}

"""
Input used to update user information.
"""
input UpdateUserInput {
  """
  ID of user to update
  """
  id: ID!
}

"""
Response from updating user information.
"""
type UpdateUserMutationResult {
  """
  The user updated. Only returned if update was successful.
  """
  user: User
  """
  Errors from updating user information. Only returned if update was unsuccessful.
  """
  errors: [Error!]
}

"""
Response from creating a user.
"""
type CreateUserMutationResult {
  """
  If the user was created successfully.
  """
  success: Boolean!
  """
  General message field. May contain error message if mutation was unsuccessful.
  """
  message: String
  """
  Username of the created user. Only returned if user was created successfully.
  """
  username: String
  """
  Temporary password of the created user. Only returned if user was created successfully.
  """
  password: String
}

"""
Returned when a user logs in our logs out.
"""
type AuthPayload {
  """
  Whether auth operation was successful or not
  """
  success: Boolean!
  """
  Auth token used for future requests
  """
  token: String!
  """
  Optional error message if success is false
  """
  message: String
}

"""
User type.
"""
type User {
  """
  Unique User  ID
  """
  id: Int!
  """
  Username
  """
  username: String!
  """
  display name for the user
  """
  displayName: String
  """
  Password
  """
  password: String!
  """
  role - see enum Role
  """
  role: Role!
  """
  Teaching preferences
  """
  preferences: [CoursePreference!]
  """
  Determine if the user is marked active
  """
  active: Boolean!
  """
  Determine if user has Peng
  """
  hasPeng: Boolean!
}

"""
Days of the Week
"""
enum Day {
  """
  Monday is the first day of the business week. Generally lectures on Monday are 80 minutes long.
  """
  MONDAY
  """
  Tuesday is the second day of the business week. Generally lectures on Tuesday are 50 minutes long.
  """
  TUESDAY
  """
  Wednesday is the third day of the business week.
  Generally lectures on Wednesday are 50 minutes long.
  """
  WEDNESDAY
  """
  Thursday is the fourth day of the business week.
  Generally lectures on Thursday are 80 minutes long.
  """
  THURSDAY
  """
  Friday is the fifth day of the business week.
  Generally lectures on Friday are 50 minutes long.
  """
  FRIDAY
  """
  Saturday is outside of the business week.
  Generally nothing is scheduled on Saturday.
  """
  SATURDAY
  """
  Sunday is outside of the business week.
  Generally nothing is scheduled on Sunday.
  """
  SUNDAY
}

"""
User role
"""
enum Role {
  """
  Administrator role (department staff etc.)
  """
  ADMIN
  """
  User role (professor, student etc.)
  """
  USER
}

"""
The UVic academic year is divided into a winter session and a summer session.
The winter session includes the fall term (September-December) and the spring term (January-April).
The summer session runs May-August and has multiple terms.
https://www.uvic.ca/students/undergraduate/program-planning/index.php
"""
enum Term {
  """
  The fall term (September-December).
  Fall is under the winter session.
  """
  FALL
  """
  The spring term (January-April).
  Spring is under the winter session.
  """
  SPRING
  """
  The summer term (May-August).
  Summer is under the summer session.
  """
  SUMMER
}

"""
Company 3 and 4
"""
enum Company {
  """
  SENG499 Summer 2022 - Company 3
  https://github.com/SENG499-S22-Company3
  """
  COMPANY3
  """
  SENG499 Summer 2022 - Company 4
  https://github.com/SENG499-Company-4
  """
  COMPANY4
}
