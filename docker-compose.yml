# This docker-compose file can be used to reproduce the E2E docker environment to 
# debug issues and tests.
# Run `docker-compose build` followed by `docker-compose up` to test the application.
# Make sure postgresql is not running locally, you may have to disable the service with
# `sudo systemctl stop postgresql`.
version: "3"
services:
  c3algo1:
    container_name: company-3-algorithm-1
    image: ghcr.io/seng499-s22-company3/algorithm-1:latest
    ports:
      - 4040:4040
    environment:
      PORT: 4040
  c3algo2:
    container_name: company-3-algorithm-2
    image: ghcr.io/seng499-s22-company3/algorithm-2:latest
    ports:
      - 5000:5000
    environment:
      PORT: 5000
  c3backend:
    container_name: company-3-backend
    image: ghcr.io/seng499-s22-company3/backend:latest
    ports:
      - 4000:4000
    environment:
      PORT: 4000
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
  # Container name "database"
  postgres:
    # Official Postgres image from DockerHub (we use the last version)
    container_name: postgresql
    image: postgres:14-alpine
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: admin # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: admin # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: postgresql # The PostgreSQL default database (automatically created at first launch)
    volumes:
      # the default PostgreSQL data path.
      # It means that every time the repository is modifying the data inside
      # of `/var/lib/postgresql/data/`, automatically the change will appear in `db-data`.
      # You don't need to create the `db-data` folder. Docker Compose will do it for you.
      - ./db-data/:/var/lib/postgresql/data/